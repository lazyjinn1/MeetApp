{"ast":null,"code":"import mockData from './mock-data';\n\n/**\r\n@param {*} events:\r\n * This function takes an events array, then uses map to create a new array with only locations.\r\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n */\nexport const extractLocations = events => {\n  const extractedLocations = events.map(event => event.location);\n  const locations = [...new Set(extractedLocations)];\n  return locations;\n};\nconst removeQuery = () => {\n  let newurl;\n  if (window.history.pushState && window.location.pathname) {\n    newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname;\n    window.history.pushState(\"\", \"\", newurl);\n  } else {\n    newurl = window.location.protocol + \"//\" + window.location.host;\n    window.history.pushState(\"\", \"\", newurl);\n  }\n};\nconst getToken = async code => {\n  const encodeCode = encodeURIComponent(code);\n  const response = await fetch('YOUR_GET_ACCESS_TOKEN_ENDPOINT' + '/' + encodeCode);\n  const {\n    access_token\n  } = await response.json();\n  access_token && localStorage.setItem(\"access_token\", access_token);\n  return access_token;\n};\nconst checkToken = async accessToken => {\n  const response = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`);\n  const result = await response.json();\n  return result;\n};\n\n/*This function will fetch the list of all events*/\nexport const getEvents = async () => {\n  if (window.location.href.startsWith('http://localhost')) {\n    return mockData;\n  }\n  const token = await getAccessToken();\n  if (token) {\n    removeQuery();\n    const url = \"YOUR_GET_EVENTS_API_ENDPOINT\" + \"/\" + token;\n    const response = await fetch(url);\n    const result = await response.json();\n    if (result) {\n      return result.events;\n    } else return null;\n  }\n};\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem('access_token');\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = await searchParams.get(\"code\");\n    if (!code) {\n      const response = await fetch(\"YOUR_SERVERLESS_GET_AUTH_URL_ENDPOINT\");\n      const result = await response.json();\n      const {\n        authUrl\n      } = result;\n      return window.location.href = authUrl;\n    }\n    return code && getToken(code);\n  }\n  return accessToken;\n};","map":{"version":3,"names":["mockData","extractLocations","events","extractedLocations","map","event","location","locations","Set","removeQuery","newurl","window","history","pushState","pathname","protocol","host","getToken","code","encodeCode","encodeURIComponent","response","fetch","access_token","json","localStorage","setItem","checkToken","accessToken","result","getEvents","href","startsWith","token","getAccessToken","url","getItem","tokenCheck","error","removeItem","searchParams","URLSearchParams","search","get","authUrl"],"sources":["C:/Users/carre/OneDrive/Documents/GitHub/meetapp/src/api.js"],"sourcesContent":["import mockData from './mock-data';\r\n\r\n/**\r\n@param {*} events:\r\n * This function takes an events array, then uses map to create a new array with only locations.\r\n * It will also remove all duplicates by creating another new array using the spread operator and spreading a Set.\r\n */\r\nexport const extractLocations = (events) => {\r\n  const extractedLocations = events.map((event) => event.location);\r\n  const locations = [...new Set(extractedLocations)];\r\n  return locations;\r\n};\r\n\r\nconst removeQuery = () => {\r\n  let newurl;\r\n  if (window.history.pushState && window.location.pathname) {\r\n    newurl =\r\n      window.location.protocol +\r\n      \"//\" +\r\n      window.location.host +\r\n      window.location.pathname;\r\n    window.history.pushState(\"\", \"\", newurl);\r\n  } else {\r\n    newurl = window.location.protocol + \"//\" + window.location.host;\r\n    window.history.pushState(\"\", \"\", newurl);\r\n  }\r\n};\r\n\r\nconst getToken = async (code) => {\r\n  const encodeCode = encodeURIComponent(code);\r\n  const response = await fetch(\r\n    'YOUR_GET_ACCESS_TOKEN_ENDPOINT' + '/' + encodeCode\r\n  );\r\n  const { access_token } = await response.json();\r\n  access_token && localStorage.setItem(\"access_token\", access_token);\r\n\r\n  return access_token;\r\n};\r\n\r\nconst checkToken = async (accessToken) => {\r\n  const response = await fetch(\r\n    `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\r\n  );\r\n  const result = await response.json();\r\n  return result;\r\n};\r\n\r\n/*This function will fetch the list of all events*/\r\nexport const getEvents = async () => {\r\n  if (window.location.href.startsWith('http://localhost')) {\r\n    return mockData;\r\n  }\r\n  const token = await getAccessToken();\r\n\r\n  if (token) {\r\n    removeQuery();\r\n    const url =  \"YOUR_GET_EVENTS_API_ENDPOINT\" + \"/\" + token;\r\n    const response = await fetch(url);\r\n    const result = await response.json();\r\n    if (result) {\r\n      return result.events;\r\n    } else return null; \r\n  }\r\n};\r\n\r\nexport const getAccessToken = async () => {\r\n  const accessToken = localStorage.getItem('access_token');\r\n  const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n  if (!accessToken || tokenCheck.error) {\r\n    await localStorage.removeItem(\"access_token\");\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const code = await searchParams.get(\"code\");\r\n    if (!code) {\r\n      const response = await fetch(\r\n        \"YOUR_SERVERLESS_GET_AUTH_URL_ENDPOINT\"\r\n      );\r\n      const result = await response.json();\r\n      const { authUrl } = result;\r\n      return (window.location.href = authUrl);\r\n    }\r\n    return code && getToken(code);\r\n  }\r\n  return accessToken;\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}