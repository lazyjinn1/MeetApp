{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carre\\\\OneDrive\\\\Documents\\\\GitHub\\\\meetapp\\\\src\\\\components\\\\NumberOfEvents.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NumberOfEvents = ({\n  onNumberOfEventsChange\n}) => {\n  _s();\n  const [eventNumber, setEventNumber] = useState(32);\n  const handleInputChange = event => {\n    const value = event.target.value;\n    if (value.trim() === \"\") {\n      // Set the value to 0 for an empty string\n      setEventNumber(0);\n    } else {\n      const intValue = parseInt(value, 10);\n      if (!isNaN(intValue)) {\n        setEventNumber(intValue);\n      } else {\n        // Set the value to 0 if it would otherwise become NaN\n        setEventNumber(0);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"numberOfEvents\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"numberOfEventsInput\",\n      type: \"text\",\n      value: eventNumber,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(NumberOfEvents, \"gsc+Rgc7I3CLsAg/hQ5plQmEpus=\");\n_c = NumberOfEvents;\nexport default NumberOfEvents;\nvar _c;\n$RefreshReg$(_c, \"NumberOfEvents\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","NumberOfEvents","onNumberOfEventsChange","_s","eventNumber","setEventNumber","handleInputChange","event","value","target","trim","intValue","parseInt","isNaN","id","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/carre/OneDrive/Documents/GitHub/meetapp/src/components/NumberOfEvents.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst NumberOfEvents = ({ onNumberOfEventsChange }) => {\r\n    const [eventNumber, setEventNumber] = useState(32);\r\n\r\n    const handleInputChange = (event) => {\r\n        const value = event.target.value;\r\n        if (value.trim() === \"\") {\r\n            // Set the value to 0 for an empty string\r\n            setEventNumber(0);\r\n        } else {\r\n            const intValue = parseInt(value, 10);\r\n            if (!isNaN(intValue)) {\r\n                setEventNumber(intValue);\r\n            } else {\r\n                // Set the value to 0 if it would otherwise become NaN\r\n                setEventNumber(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"numberOfEvents\">\r\n            <input\r\n                id=\"numberOfEventsInput\"\r\n                type=\"text\"\r\n                value={eventNumber}\r\n                onChange={handleInputChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NumberOfEvents;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAuB,CAAC,KAAK;EAAAC,EAAA;EACnD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMQ,iBAAiB,GAAIC,KAAK,IAAK;IACjC,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM,CAACD,KAAK;IAChC,IAAIA,KAAK,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACrB;MACAL,cAAc,CAAC,CAAC,CAAC;IACrB,CAAC,MAAM;MACH,MAAMM,QAAQ,GAAGC,QAAQ,CAACJ,KAAK,EAAE,EAAE,CAAC;MACpC,IAAI,CAACK,KAAK,CAACF,QAAQ,CAAC,EAAE;QAClBN,cAAc,CAACM,QAAQ,CAAC;MAC5B,CAAC,MAAM;QACH;QACAN,cAAc,CAAC,CAAC,CAAC;MACrB;IACJ;EACJ,CAAC;EAED,oBACIL,OAAA;IAAKc,EAAE,EAAC,gBAAgB;IAAAC,QAAA,eACpBf,OAAA;MACIc,EAAE,EAAC,qBAAqB;MACxBE,IAAI,EAAC,MAAM;MACXR,KAAK,EAAEJ,WAAY;MACnBa,QAAQ,EAAEX;IAAkB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAAlB,EAAA,CA7BKF,cAAc;AAAAqB,EAAA,GAAdrB,cAAc;AA+BpB,eAAeA,cAAc;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}